@page "/brandEdit/{IdBrand:int?}"
@rendermode InteractiveServer
@using BlazorApp.Models
@using Service
@inject IService<Brand> dataRepository
@inject IService<Product> dataRepositoryProduct
@inject NavigationManager Navigation

<h3>Modifier la marque</h3>

@if (isLoading)
{
    <p><em>Chargement...</em></p>
}
else
{
    <EditForm Model="brand" OnValidSubmit="HandleValidSubmit" FormName="brandForm" id="brandDetail">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="BrandName" class="form-label">Nom de la marque</label>
            <InputText id="BrandName" class="form-control" @bind-Value="brand.Name" />
        </div>

        <button type="submit" class="btn btn-primary">Enregistrer</button>
        @if(delete)
        {
            <button type="button" class="btn btn-danger ms-2" @onclick="DeleteBrand">Supprimer</button>
        }
        else
        {
            <p> Un produit de cette marque existe suppresion impossible</p>
        }
        <button type="button" class="btn btn-secondary ms-2" @onclick="Retour">Annuler</button>
    </EditForm>

}

@code {
    [Parameter]
    public int? IdBrand { get; set; }

    private Brand brand = new();
    private bool isLoading = true;
    private List<Product>? productList;
    bool delete = true;

    protected override async Task OnInitializedAsync()
    {
        var p = await dataRepository.GetByIdAsync(IdBrand.Value);
        productList = await dataRepositoryProduct.GetAllAsync();
        if (p != null)
                brand = p;
            else
                Navigation.NavigateTo("/brands");
        foreach (Product product in productList)
        {
            if (product.Brand == brand.Name)
            {
                delete = false;
                break;
            }
        }
        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {

        await dataRepository.UpdateAsync(brand);
        Navigation.NavigateTo("/brands");
    }

    private async Task DeleteBrand()
    {
        await dataRepository.DeleteAsync(brand.Id);
        Navigation.NavigateTo("/brands");
    }

    private void Retour()
    {
        Navigation.NavigateTo("/brands");
    }
}
