@page "/typeProductAdd"
@rendermode InteractiveServer
@using BlazorApp.Models
@using Service
@inject IService<TypeProduct> dataRepository
@inject NavigationManager Navigation

<h3>@(IdTypeProduct.HasValue ? "Modifier un type de produit" : "Ajouter un type de produit")</h3>

@if (isLoading)
{
    <p><em>Chargement...</em></p>
}
else
{
    <EditForm Model="typeProduct" OnValidSubmit="HandleValidSubmit" FormName="typeProductForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Nom -->
        <div class="mb-3">
            <label for="TypeProductName" class="form-label">Nom du type de produit</label>
            <InputText id="TypeProductName" class="form-control" @bind-Value="typeProduct.Name" />
        </div>

        <button type="submit" class="btn btn-primary">Enregistrer</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Retour">Annuler</button>
    </EditForm>
}

@code {
    [Parameter]
    public int? IdTypeProduct { get; set; }

    private TypeProduct typeProduct = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (IdTypeProduct.HasValue)
        {
            var existingTypeProduct = await dataRepository.GetByIdAsync(IdTypeProduct.Value);
            if (existingTypeProduct != null)
            {
                typeProduct = existingTypeProduct;
            }
        }
        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        if (IdTypeProduct.HasValue)
        {
            await dataRepository.UpdateAsync(typeProduct);
        }
        else
        {
            await dataRepository.AddAsync(typeProduct);
        }

        Navigation.NavigateTo("/typeProducts");
    }

    private void Retour()
    {
        Navigation.NavigateTo("/typeProducts");
    }
}
